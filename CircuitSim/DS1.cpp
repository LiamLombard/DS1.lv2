#include <cmath>
#include "DS1.h"

DS1::DS1(const double tt_step, const std::string& fileName) :
t_step(tt_step),
lookup(fileName)
{ }

double DS1::Gc(double C)
{
  return C/t_step;
}
double DS1::Gd(double v_m)
{
  return (1.5e-15/26e-3)*std::exp(v_m/26e-3);
}

double DS1::Ieq(double v_m)
{
  return 1.5e-15*(std::exp(v_m/26e-3) - 1) - Gd(v_m)*v_m;
}

std::array<double, C_SIZE> DS1::StampDiodeCurrents(std::array<double, C_SIZE> I)
{
  std::array<double, C_SIZE> ii = I;
  ii[2] = ii[2] + Ieq(-v_last[2]) - Ieq(v_last[2]);
  return ii;
}

double DS1::Ic(double v_across, double C)
{
  return -v_across*Gc(C);
}


double DS1::GaussianEllimination(std::array<double, C_SIZE> i, double gd)
{
	std::array<double, C_SIZE> output;

	output[0] = -1.0*i[7];

	output[1] = (779844091319.56640692640692640693*(5.106639514724528409746212446653e78*i[1] + 4.9392064557936245686398490024062e78*i[2] + 4.3273688828277481695892532012639e78*i[3] + 1.8879342107606189033197119999315e77*i[4] + 3.0214382935864630159986619719987e78*i[5] + 1.5286817688869166220622062723771e78*i[6] - 2.3211997794202401862482783848423e75*i[7] + 2.3829818380825130657875506016831e80*gd*i[1] - 1.0831735627647786662670684553105e77*gd*i[7]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[2] = (178178777984694532.65454545454545*(2.1617675314222796606441916151988e73*i[1] + 2.2091753379158360933083426231683e73*i[2] + 1.9355167068980903888637523053117e73*i[3] + 8.4442262848269683025362862544205e71*i[4] + 1.3514087785085732777042542552314e73*i[5] + 6.837385911223061717760081513217e72*i[6] - 9.8262160519194530029281437054491e69*i[7]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[3] = (1372525600722436.8761904761904762*(2.4587323197884932781757120461727e75*i[1] + 2.5126525976822482502703984472592e75*i[2] + 5.1697671572061578265605522705806e75*i[3] + 1.1737197653740853885239045239502e74*i[4] + 3.6017377677850196358829758117277e75*i[5] + 1.7710046401535372260644601257727e75*i[6] - 1.1176055999038605809889600209876e72*i[7] + 2.5870118028789847597745846719056e78*gd*i[3] + 1.8589476397590139609389681329775e76*gd*i[4] + 1.7994285103283768039986277148412e78*gd*i[5] + 8.6572285082188902076572256960523e77*gd*i[6]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[4] = (42423518567784412.536796536796537*(3.4704672991923141605141764704624e72*i[1] + 3.5465750396273266870652402268566e72*i[2] + 3.7973286526808644922832205186623e72*i[3] + 2.3254631336623168089649214604255e73*i[4] + 4.3325471945268576927162002630536e72*i[5] + 1.3136751681500012277316864222528e73*i[6] - 1.5774851359965064365973529411193e69*i[7] + 6.014242363926221638331955724339e74*gd*i[3] + 2.0148898069258591930047107470517e76*gd*i[4] + 1.8851281835184905445457134012878e75*gd*i[5] + 1.0492393453703372606948962319907e76*gd*i[6]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[5] = (2745051201444873752.3809523809524*(8.5836315158706335681780169659054e71*i[1] + 8.7718715259556483661894321657746e71*i[2] + 1.8008688838925098179414879058638e72*i[3] + 6.6957547551778709796523094974464e70*i[4] + 3.7724121184419609545940249274449e72*i[5] + 1.8282712695208284116145466773426e72*i[6] - 3.9016506890321061673536440754115e68*i[7] + 8.9971425516418840199931385742061e74*gd*i[3] + 2.9133799199831217506615570747176e73*gd*i[4] + 2.8201003499568385890578826468324e75*gd*i[5] + 1.3567781662650808602688086750379e75*gd*i[6]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[6] = (0.69264069264069264069264069264069*(1.7211426611817970962362447999705e90*i[1] + 1.7588875144294669149981825794203e90*i[2] + 3.5093941684854314280448505805375e90*i[3] + 8.0461231169620581179307803198033e89*i[4] + 7.2457455911686441160845840797983e90*i[5] + 3.4884669371126438865599020871246e91*i[6] - 7.8233757326445322556192945453205e86*i[7] + 1.7155024076817364719053644059388e93*gd*i[3] + 6.4264813377719471006996082707121e92*gd*i[4] + 5.3771393667339418654495940749963e93*gd*i[5] + 2.9928501618317943875710725248762e94*gd*i[6]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

	output[7] = (0.000000078709169618260527351436442345533*(5.7382554043320591087094647911698e94*i[0] + 2.2998259815628836667531324417106e94*i[1] + 2.2244208353818115831350174592756e94*i[2] + 1.9488736888197726223424242846261e94*i[3] + 8.5024998080815347526297702858434e92*i[4] + 1.3607348373118942133121479291168e94*i[5] + 6.884570644727188384944979199882e93*i[6] + 1.5629224648950797463437874315723e91*i[7] + 5.0010457990201760095856211945893e97*gd*i[0] + 1.0731996118019065477385658111806e96*gd*i[1] + 2.2244208353818115249144384606687e94*gd*i[7]))/(3.936281620637682809591201255088e90*gd + 4.5165331793247218486497164826208e87);

  v_last = output;
	return output[6];
}

std::array<double, C_SIZE> DS1::CalcLinCurrents(const double vin)
{
  return { 0,
          -Ic(v_last[1]-v_last[2], C1),
           Ic(v_last[1]-v_last[2], C1) - Ic(v_last[2], C2) - Ic(v_last[2]-v_last[3], C3),
           Ic(v_last[2]-v_last[3], C3),
          -Ic(v_last[4], C4),
           0,
           0,
          -vin};
}

double DS1::CalcV(const double vin)
{
  const auto Il = CalcLinCurrents(vin);
  const std::array<double, C_SIZE> I = StampDiodeCurrents(Il);
  const double gd = Gd(-v_last[2]) + Gd(v_last[2]);
  return GaussianEllimination(I, gd);
}

std::array<double, C_SIZE> DS1::StampDiodeCurrentsLUT(std::array<double, C_SIZE> I, const double ieq)
{
  std::array<double, C_SIZE> ii = I;
  ii[2] = ii[2] + ieq;
  return ii;
}

double DS1::CalcVLUT(const double vin)
{
  const auto params = lookup.lookup(static_cast<float>(v_last[2]));
  const auto Il = CalcLinCurrents(vin);
  const std::array<double, C_SIZE> I = StampDiodeCurrentsLUT(Il, params[2]);
  const double gd = params[1];
  return GaussianEllimination(I, gd);
}